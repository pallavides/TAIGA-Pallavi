/*
 * ioi_handler.c
 *
 *  Created on: Mar 31, 2015
 *      Author: teja
 */

#include "ioi_handler.h"
#include "utilities/fifo_queue.h"
#include "utilities/axi_gpio.h"

bool plant_filter(u32 spiParams, u32 spiWriteData);

void ioi_handler(u32* fifo_packet, u8 length){
	u8 writeBuffer[4], readBuffer[4], i;
	u32 retData[4];

	switch ((fifo_packet[0] >> 24 & 0xFF)){
		case (PLANT): // SPI
			if(length < 1)	break; // HANDLE THE ERROR HERE

			u32_to_buffer(fifo_packet[1], writeBuffer, (fifo_packet[0] >> 8) & 0xFF);
			if((fifo_packet[0] >> 8) & 0xFF){
				if(plant_filter(fifo_packet[1], fifo_packet[1]))
					spi_transfer(fifo_packet[0] & 0xFF, writeBuffer, readBuffer, (fifo_packet[0] >> 8) & 0xFF);
			}
			if (((fifo_packet[0] >> 16) & 0xFF) == READ){
				retData[0] = buffer_to_u32(readBuffer, (fifo_packet[0] >> 8) & 0xFF);
				if (((fifo_packet[0] & 0xFF) == SS_ENCODER_P || (fifo_packet[0] & 0xFF) == SS_ENCODER_S) && (fifo_packet[1]  == (READ_CNTR << 24)))
					//updateControlParam((fifo_packet[0] & 0xFF), retData[0] );
			}
			else if ((((fifo_packet[0] >> 16) & 0xFF) == WRITE) && ((fifo_packet[0] & 0xFF) == SS_DAC)){
				updateControlParam((fifo_packet[0] & 0xFF), buffer_to_u32(writeBuffer, (fifo_packet[0] >> 8) & 0xFF));
			}
			break;
		case (SET_POINT): // SET_POINT
			retData[0] = ((u32)getSetPoint());
			break;
		case (STATE_INFORMATION): // STATE_INFORMATION
			getStateInformation((unsigned int *)retData);
			break;
	}

	for(i = 0; i < ((fifo_packet[0] >> 16) & 0xFF); ++i)
		enqueue(retData, );

	guardTriggerMechanism(startFlagTAIGA);
	if(!startFlagTAIGA)	startFlagTAIGA = read_btn(BTN0);
	if(read_btn(BTN1)){
		i = read_sw_raw();
		updateSetPoint((i & 8) ? (-5*(i&7)) : (5*(i&7)));
	}
	if(read_btn(BTN2)){
		select_controller(PRODUCTION);
	}

}

bool plant_filter(u32 spiParams, u32 spiWriteData){
	if((((spiParams & 0xFF) == SS_ENCODER_S) | ((spiParams & 0xFF) == SS_ENCODER_P)) && (((spiParams >> 8) & 0xFFFF) == (READ << 8) | (BITS_32))) // read encoder
		return true;
	if(((spiParams & 0xFF) == SS_DAC) && (((spiParams >> 8) & 0xFFFF) == (WRITE << 16) | (BITS_16 << 8)) && ((spiWriteData & DAC_CONFIG_BITS) == DAC_CONFIG_BITS)) // write voltage
		return true;
	return false;
}

/*
 * ioi_handler.c
 *
 *  Created on: Mar 31, 2015
 *      Author: teja
 */

#include "ioi_handler.h"
#include "utilities/fifo_queue.h"
#include "utilities/axi_gpio.h"
#include "pendulum_plant.h"

bool plant_filter(QueuePacket* packet);

void ioi_handler(QueuePacket fifo_packet){
	u8 writeBuffer[4], readBuffer[4], i;

	QueuePacket returnPacket;

	switch (fifo_packet.command){
		case (PLANT): // SPI
			if(!plant_filter(&fifo_packet)) return; // ERROR HANDLING HERE FOR FILTERING SPI
			if(!fifo_packet.bytes)	return;	// ERROR HANDLING IF TRANSFER BYTES IS 0

			if( (fifo_packet.slave == SS_DAC) && (fifo_packet.operation == WRITE) && (fifo_packet.bytes = BITS_16)
					&& ((fifo_packet.data[0] & DAC_CONFIG_BITS) == DAC_CONFIG_BITS) ) // write voltage
				write_voltage(fifo_packet.data);
			else if( (fifo_packet.slave == SS_ENCODER_S | fifo_packet.slave == SS_ENCODER_S) && (fifo_packet.operation == READ)
					&& (fifo_packet.bytes ==  BITS_32) ) // read encoder
				returnPacket.data[0] = read_sensor(fifo_packet.slave);
			break;
			case (SET_POINT): // SET_POINT
				retData[0] = ((u32)getSetPoint());
				break;
			case (STATE_INFORMATION): // STATE_INFORMATION
				getStateInformation((unsigned int *)retData);
				break;
			}
			for(i = 0; i < ((fifoParams >> 16) & 0xFF); ++i)
				enqueue_taiga_to_controller(retData[i]);
			set_led(LED1, false);
			guardTriggerMechanism(startFlagTAIGA);
			if(!startFlagTAIGA)	startFlagTAIGA = read_btn(BTN0);
			if(read_btn(BTN1)){
				i = read_sw_raw();
				updateSetPoint((i & 8) ? (-5*(i&7)) : (5*(i&7)));
			}
			if(read_btn(BTN2)){
				select_controller(PRODUCTION);
			}
}

bool plant_filter(QueuePacket* packet){
	if( (packet->slave == SS_ENCODER_S | packet->slave == SS_ENCODER_S) && (packet->operation == READ) && (packet->bytes ==  BITS_32) ) // read encoder
		return true;
	if( (packet->slave == SS_DAC) && (packet->operation == WRITE) && (packet->bytes = BITS_16) && ((packet->data[0] & DAC_CONFIG_BITS) == DAC_CONFIG_BITS) )
		return true;
	return false;
}

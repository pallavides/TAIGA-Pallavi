// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FIFO_multiplexer,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=105}" *)

module FIFO_multiplexer (
        switch_select,
        rx_data_a,
        rx_ready_a,
        rx_valid_a,
        rx_tlast_a,
        rx_data_b,
        rx_ready_b,
        rx_valid_b,
        rx_tlast_b,
        rx_data,
        rx_ready,
        rx_valid,
        rx_tlast,
        tx_data_a,
        tx_ready_a,
        tx_valid_a,
        tx_tlast_a,
        tx_data_b,
        tx_ready_b,
        tx_valid_b,
        tx_tlast_b,
        tx_data,
        tx_ready,
        tx_valid,
        tx_tlast
);

parameter    ap_true = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;

input   switch_select;
input  [31:0] rx_data_a;
output   rx_ready_a;
input   rx_valid_a;
input   rx_tlast_a;
input  [31:0] rx_data_b;
output   rx_ready_b;
input   rx_valid_b;
input   rx_tlast_b;
output  [31:0] rx_data;
input   rx_ready;
output   rx_valid;
output   rx_tlast;
output  [31:0] tx_data_a;
input   tx_ready_a;
output   tx_valid_a;
output   tx_tlast_a;
output  [31:0] tx_data_b;
input   tx_ready_b;
output   tx_valid_b;
output   tx_tlast_b;
input  [31:0] tx_data;
output   tx_ready;
input   tx_valid;
input   tx_tlast;

reg rx_ready_a;
reg rx_ready_b;
reg[31:0] rx_data;
reg rx_valid;
reg rx_tlast;
reg[31:0] tx_data_a;
reg tx_valid_a;
reg tx_tlast_a;
reg[31:0] tx_data_b;
reg tx_valid_b;
reg tx_tlast_b;
reg tx_ready;
wire   [0:0] switch_select_read_read_fu_76_p2;




/// rx_data assign process. ///
always @ (rx_data_a or rx_data_b or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_data = rx_data_b;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_data = rx_data_a;
    end else begin
        rx_data = 'bx;
    end
end

/// rx_ready_a assign process. ///
always @ (rx_ready or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_ready_a = ap_const_lv1_0;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_ready_a = rx_ready;
    end else begin
        rx_ready_a = 'bx;
    end
end

/// rx_ready_b assign process. ///
always @ (rx_ready or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_ready_b = rx_ready;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_ready_b = ap_const_lv1_0;
    end else begin
        rx_ready_b = 'bx;
    end
end

/// rx_tlast assign process. ///
always @ (rx_tlast_a or rx_tlast_b or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_tlast = rx_tlast_b;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_tlast = rx_tlast_a;
    end else begin
        rx_tlast = 'bx;
    end
end

/// rx_valid assign process. ///
always @ (rx_valid_a or rx_valid_b or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_valid = rx_valid_b;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        rx_valid = rx_valid_a;
    end else begin
        rx_valid = 'bx;
    end
end

/// tx_data_a assign process. ///
always @ (tx_data or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_data_a = ap_const_lv32_0;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_data_a = tx_data;
    end else begin
        tx_data_a = 'bx;
    end
end

/// tx_data_b assign process. ///
always @ (tx_data or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_data_b = tx_data;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_data_b = ap_const_lv32_0;
    end else begin
        tx_data_b = 'bx;
    end
end

/// tx_ready assign process. ///
always @ (tx_ready_a or tx_ready_b or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_ready = tx_ready_b;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_ready = tx_ready_a;
    end else begin
        tx_ready = 'bx;
    end
end

/// tx_tlast_a assign process. ///
always @ (tx_tlast or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_tlast_a = ap_const_lv1_0;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_tlast_a = tx_tlast;
    end else begin
        tx_tlast_a = 'bx;
    end
end

/// tx_tlast_b assign process. ///
always @ (tx_tlast or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_tlast_b = tx_tlast;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_tlast_b = ap_const_lv1_0;
    end else begin
        tx_tlast_b = 'bx;
    end
end

/// tx_valid_a assign process. ///
always @ (tx_valid or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_valid_a = ap_const_lv1_0;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_valid_a = tx_valid;
    end else begin
        tx_valid_a = 'bx;
    end
end

/// tx_valid_b assign process. ///
always @ (tx_valid or switch_select_read_read_fu_76_p2)
begin
    if (~(switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_valid_b = tx_valid;
    end else if ((switch_select_read_read_fu_76_p2 == ap_const_lv1_0)) begin
        tx_valid_b = ap_const_lv1_0;
    end else begin
        tx_valid_b = 'bx;
    end
end
assign switch_select_read_read_fu_76_p2 = switch_select;


endmodule //FIFO_multiplexer


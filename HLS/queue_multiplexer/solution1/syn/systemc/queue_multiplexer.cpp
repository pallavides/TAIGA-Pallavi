// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "queue_multiplexer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool queue_multiplexer::ap_true = true;
const sc_lv<1> queue_multiplexer::ap_const_lv1_0 = "0";
const sc_logic queue_multiplexer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic queue_multiplexer::ap_const_logic_0 = sc_dt::Log_0;

queue_multiplexer::queue_multiplexer(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_rx_data);
    sensitive << ( rx_data_a );
    sensitive << ( rx_data_b );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_rx_ready_a);
    sensitive << ( rx_ready );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_rx_ready_b);
    sensitive << ( rx_ready );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_rx_tlast);
    sensitive << ( rx_tlast_a );
    sensitive << ( rx_tlast_b );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_rx_valid);
    sensitive << ( rx_valid_a );
    sensitive << ( rx_valid_b );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_switch_select_read_read_fu_74_p2);
    sensitive << ( switch_select );

    SC_METHOD(thread_tx_data_a);
    sensitive << ( tx_data );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_tx_data_b);
    sensitive << ( tx_data );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_tx_ready);
    sensitive << ( tx_ready_a );
    sensitive << ( tx_ready_b );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_tx_tlast_a);
    sensitive << ( tx_tlast );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_tx_tlast_b);
    sensitive << ( tx_tlast );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_tx_valid_a);
    sensitive << ( tx_valid );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_METHOD(thread_tx_valid_b);
    sensitive << ( tx_valid );
    sensitive << ( switch_select_read_read_fu_74_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "queue_multiplexer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, switch_select, "(port)switch_select");
    sc_trace(mVcdFile, rx_data_a, "(port)rx_data_a");
    sc_trace(mVcdFile, rx_ready_a, "(port)rx_ready_a");
    sc_trace(mVcdFile, rx_valid_a, "(port)rx_valid_a");
    sc_trace(mVcdFile, rx_tlast_a, "(port)rx_tlast_a");
    sc_trace(mVcdFile, rx_data_b, "(port)rx_data_b");
    sc_trace(mVcdFile, rx_ready_b, "(port)rx_ready_b");
    sc_trace(mVcdFile, rx_valid_b, "(port)rx_valid_b");
    sc_trace(mVcdFile, rx_tlast_b, "(port)rx_tlast_b");
    sc_trace(mVcdFile, rx_data, "(port)rx_data");
    sc_trace(mVcdFile, rx_ready, "(port)rx_ready");
    sc_trace(mVcdFile, rx_valid, "(port)rx_valid");
    sc_trace(mVcdFile, rx_tlast, "(port)rx_tlast");
    sc_trace(mVcdFile, tx_data_a, "(port)tx_data_a");
    sc_trace(mVcdFile, tx_ready_a, "(port)tx_ready_a");
    sc_trace(mVcdFile, tx_valid_a, "(port)tx_valid_a");
    sc_trace(mVcdFile, tx_tlast_a, "(port)tx_tlast_a");
    sc_trace(mVcdFile, tx_data_b, "(port)tx_data_b");
    sc_trace(mVcdFile, tx_ready_b, "(port)tx_ready_b");
    sc_trace(mVcdFile, tx_valid_b, "(port)tx_valid_b");
    sc_trace(mVcdFile, tx_tlast_b, "(port)tx_tlast_b");
    sc_trace(mVcdFile, tx_data, "(port)tx_data");
    sc_trace(mVcdFile, tx_ready, "(port)tx_ready");
    sc_trace(mVcdFile, tx_valid, "(port)tx_valid");
    sc_trace(mVcdFile, tx_tlast, "(port)tx_tlast");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, switch_select_read_read_fu_74_p2, "switch_select_read_read_fu_74_p2");
#endif

    }
    mHdltvinHandle.open("queue_multiplexer.hdltvin.dat");
    mHdltvoutHandle.open("queue_multiplexer.hdltvout.dat");
}

queue_multiplexer::~queue_multiplexer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void queue_multiplexer::thread_rx_data() {
    if (!esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        rx_data = rx_data_b.read();
    } else if (esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        rx_data = rx_data_a.read();
    } else {
        rx_data = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void queue_multiplexer::thread_rx_ready_a() {
    rx_ready_a = rx_ready.read();
}

void queue_multiplexer::thread_rx_ready_b() {
    rx_ready_b = rx_ready.read();
}

void queue_multiplexer::thread_rx_tlast() {
    if (!esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        rx_tlast = rx_tlast_b.read();
    } else if (esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        rx_tlast = rx_tlast_a.read();
    } else {
        rx_tlast = sc_logic('X');
    }
}

void queue_multiplexer::thread_rx_valid() {
    if (!esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        rx_valid = rx_valid_b.read();
    } else if (esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        rx_valid = rx_valid_a.read();
    } else {
        rx_valid = sc_logic('X');
    }
}

void queue_multiplexer::thread_switch_select_read_read_fu_74_p2() {
    switch_select_read_read_fu_74_p2 =  (sc_lv<1>) (switch_select.read());
}

void queue_multiplexer::thread_tx_data_a() {
    tx_data_a = tx_data.read();
}

void queue_multiplexer::thread_tx_data_b() {
    tx_data_b = tx_data.read();
}

void queue_multiplexer::thread_tx_ready() {
    if (!esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        tx_ready = tx_ready_b.read();
    } else if (esl_seteq<1,1,1>(switch_select_read_read_fu_74_p2.read(), ap_const_lv1_0)) {
        tx_ready = tx_ready_a.read();
    } else {
        tx_ready = sc_logic('X');
    }
}

void queue_multiplexer::thread_tx_tlast_a() {
    tx_tlast_a = tx_tlast.read();
}

void queue_multiplexer::thread_tx_tlast_b() {
    tx_tlast_b = tx_tlast.read();
}

void queue_multiplexer::thread_tx_valid_a() {
    tx_valid_a = tx_valid.read();
}

void queue_multiplexer::thread_tx_valid_b() {
    tx_valid_b = tx_valid.read();
}

void queue_multiplexer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"switch_select\" :  \"" << switch_select.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rx_data_a\" :  \"" << rx_data_a.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"rx_ready_a\" :  \"" << rx_ready_a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rx_valid_a\" :  \"" << rx_valid_a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rx_tlast_a\" :  \"" << rx_tlast_a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rx_data_b\" :  \"" << rx_data_b.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rx_ready_b\" :  \"" << rx_ready_b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rx_valid_b\" :  \"" << rx_valid_b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rx_tlast_b\" :  \"" << rx_tlast_b.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rx_data\" :  \"" << rx_data.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"rx_ready\" :  \"" << rx_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rx_valid\" :  \"" << rx_valid.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rx_tlast\" :  \"" << rx_tlast.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_data_a\" :  \"" << tx_data_a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tx_ready_a\" :  \"" << tx_ready_a.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_valid_a\" :  \"" << tx_valid_a.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_tlast_a\" :  \"" << tx_tlast_a.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_data_b\" :  \"" << tx_data_b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tx_ready_b\" :  \"" << tx_ready_b.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_valid_b\" :  \"" << tx_valid_b.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_tlast_b\" :  \"" << tx_tlast_b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tx_data\" :  \"" << tx_data.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_ready\" :  \"" << tx_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tx_valid\" :  \"" << tx_valid.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tx_tlast\" :  \"" << tx_tlast.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

